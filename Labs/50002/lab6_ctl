*.include "nominal.jsim" 
*.include "50002/stdcell.jsim" 
*.include "50002/lab6ctl.jsim"


* CTL
.subckt ctl reset id[31:26] ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr

Xctl vdd 0 0 id[31:26] // one read port 
+ pcsel[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe xwr 
+ $memory width=18 nlocations=64 contents=(
//0b00000 + ra2sel + bsel + ALUFN + wdsel[1:0] werf moe wr(b4 reset)
+ 0b000000000000000000 		// opcode=0b000000 ; start of nothingness 
+ 0b000000000000000000 		// opcode=0b000001
+ 0b000000000000000000 		// opcode=0b000010
+ 0b000000000000000000 		// opcode=0b000011
+ 0b000000000000000000 		// opcode=0b000100
+ 0b000000000000000000 		// opcode=0b000101
+ 0b000000000000000000 		// opcode=0b000110
+ 0b000000000000000000 		// opcode=0b000111
+ 0b000000000000000000 		// opcode=0b001000
+ 0b000000000000000000 		// opcode=0b001001
+ 0b000000000000000000 		// opcode=0b001010
+ 0b000000000000000000 		// opcode=0b001011
+ 0b000000000000000000 		// opcode=0b001100
+ 0b000000000000000000 		// opcode=0b001101
+ 0b000000000000000000 		// opcode=0b001110
+ 0b000000000000000000 		// opcode=0b001111
+ 0b000000000000000000 		// opcode=0b010000
+ 0b000000000000000000 		// opcode=0b010001
+ 0b000000000000000000 		// opcode=0b010010
+ 0b000000000000000000 		// opcode=0b010011
+ 0b000000000000000000 		// opcode=0b010100
+ 0b000000000000000000 		// opcode=0b010101
+ 0b000000000000000000 		// opcode=0b010110
+ 0b000000000000000000 		// opcode=0b010111 ; end of the nothingnesss
+ 0b000000100000010110 		// opcode=0b011000 ; LD
+ 0b000001100000000001 		// opcode=0b011001 ; ST 
+ 0b000000000000000000	 	// opcode=0b011010 ; nothingness
+ 0b000000000000000000  // 0b000001000000000100 //opcode=0b011011 ; jmp
+ 0b000000000000000000 		// opcode=0b011100 nothingness
+ 0b000000000000000000 	// 0b000000000000000100 // opcode=0b011101 ; BEQ
+ 0b000000000000000000	// 0b000000000000000100  // opcode=0b011110 ; BNE
+ 0b000000000000000000 	// not done yet // opcode=0b011111 ; LDR
+ 0b000000000000001100 		// opcode=0b100000 ; ADD
+ 0b000000000000101100 		// opcode=0b100001 ; SUB
+ 0b000000000000000000 		// opcode=0b100010 ; MUL*
+ 0b000000000000000000 		// opcode=0b100011 ; DIV*
+ 0b000000011001101100		// opcode=0b100100 ; CMPEQ
+ 0b000000011010101100		// opcode=0b100101 ; CMPLT
+ 0b000000011011101100		// opcode=0b100110 ; CMPLE
+ 0b000000000000000000 		// opcode=0b100111 ; nothingness
+ 0b000000001100001100		// opcode=0b101000 ; AND
+ 0b000000001111001100 		// opcode=0b101001 ; OR
+ 0b000000001011001100 		// opcode=0b101010 ; XOR
+ 0b000000000000000000 		// opcode=0b101011 ; nothingness
+ 0b000000010000001100 		// opcode=0b101100 ; SHL
+ 0b000000010000101100 		// opcode=0b101101 ; SHR
+ 0b000000010001101100 		// opcode=0b101110 ; SRA
+ 0b000000000000000000 		// opcode=0b101111 ; nothingness
+ 0b000000100000001100 		// opcode=0b110000 ; ADDC
+ 0b000000100000101100 		// opcode=0b110001 ; SUBC
+ 0b000000000000000000 		// opcode=0b110010 ; MULC*
+ 0b000000000000000000 		// opcode=0b110011 ; DIVC*
+ 0b000000111001101100 		// opcode=0b110100 ; CMPEQC
+ 0b000000111010101100 		// opcode=0b110101 ; CMPLTC
+ 0b000000111011101100 		// opcode=0b110110 ; CMPLEC
+ 0b000000000000000000 		// opcode=0b110111 ; nothingness
+ 0b000000101100001100 		// opcode=0b111000 ; ANDC
+ 0b000000101111001100 		// opcode=0b111001 ; ORC
+ 0b000000101011001100 		// opcode=0b111010 ; XORC
+ 0b000000000000000000 		// opcode=0b111011 ; nothingness
+ 0b000000110000001100 		// opcode=0b111100 ; SHLC
+ 0b000000110000101100 		// opcode=0b111101 ; SHRC
+ 0b000000110001101100 		// opcode=0b111110 ; SRAC
+ 0b000000000000000000 		// opcode=0b111111 ; nothigness
+ )

* pcsel[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe xwr


Xresetmux reset xwr 0 wr mux2   // WR=0 when reset = 1, else take xwr
.ends